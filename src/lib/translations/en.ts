// src/lib/translations/en.ts
const en = {
    // Header
    header: {
        appName: 'Two AIs',
        settings: 'Settings',
        signIn: 'Sign In',
        signOut: 'Sign Out',
        previousChats: 'Previous Chats',
    },

    // Language names (for display in language selector)
    languages: {
        ar: 'Arabic',
        bn: 'Bengali',
        bg: 'Bulgarian',
        zh: 'Chinese',
        hr: 'Croatian',
        cs: 'Czech',
        da: 'Danish',
        nl: 'Dutch',
        en: 'English',
        et: 'Estonian',
        fi: 'Finnish',
        fr: 'French',
        de: 'German',
        el: 'Greek',
        iw: 'Hebrew',
        hi: 'Hindi',
        hu: 'Hungarian',
        id: 'Indonesian',
        it: 'Italian',
        ja: 'Japanese',
        ko: 'Korean',
        lv: 'Latvian',
        lt: 'Lithuanian',
        no: 'Norwegian',
        pl: 'Polish',
        pt: 'Portuguese',
        ro: 'Romanian',
        ru: 'Russian',
        sr: 'Serbian',
        sk: 'Slovak',
        sl: 'Slovenian',
        es: 'Spanish',
        sw: 'Swahili',
        sv: 'Swedish',
        th: 'Thai',
        tr: 'Turkish',
        uk: 'Ukrainian',
        vi: 'Vietnamese',
        mt: 'Maltese',
        bs: 'Bosnian',
        ca: 'Catalan',
        gu: 'Gujarati',
        hy: 'Armenian',
        is: 'Icelandic',
        ka: 'Georgian',
        kk: 'Kazakh',
        kn: 'Kannada',
        mk: 'Macedonian',
        ml: 'Malayalam',
        mr: 'Marathi',
        ms: 'Malay',
        my: 'Burmese',
        pa: 'Punjabi',
        so: 'Somali',
        sq: 'Albanian',
        ta: 'Tamil',
        te: 'Telugu',
        tl: 'Tagalog',
        ur: 'Urdu',
        am: 'Amharic',
        mn: 'Mongolian',
    },

    // Settings page
    settings: {
        loading: 'Loading settings...',
        title: 'Settings',
        sections: {
            appearance: 'Appearance',
            apiKeys: 'API Keys',
            language: 'Language',
        },
        appearance: {
            theme: 'Theme',
            light: 'Light',
            dark: 'Dark',
            system: 'System',
            description: "Customize the look and feel of the application."
        },
        language: {
            title: 'Language',
            description: 'Choose your preferred language for the interface',
            conversationLanguage: 'Conversation Language',
            conversationLanguageDescription: 'The language used for AI conversations will match your interface language',
            supportedLanguages: 'Supported Languages',
            languageSupportInformation: 'Language Support Information',
            aiAgentsLanguageDescription: 'The conversation between AI agents will be conducted in your selected language.',
        },
        apiKeys: {
            title: 'API Keys',
            description: 'Manage your API keys for different AI services.',
            setKey: 'Set',
            updateKey: 'Update',
            saveUpdateKeys: 'Save / Update Keys',
            saving: 'Saving...',
            noNewKeys: 'No new keys to save.',
            keyStoredSecurely: 'Your API key will be stored securely and encrypted.',
            enteringNewKeyOverwrites: 'Entering a new key will overwrite the existing one.',
            failedToSaveKey: 'Failed to save {serviceName} key.',
            unexpectedResponse: 'Unexpected response from server.',
            someKeysNotSaved: 'Some keys could not be saved. Please check the errors above.',
            keyStatus: "key status...",
            apiKeySecurelySaved: "API Key Securely Saved",
            confirmRemoveTitle: "Confirm Removal",
            confirmRemoveDescription: "Are you sure you want to remove the API key for {serviceName}? This action cannot be undone.",
            failedToRemoveKey: "Failed to remove {serviceName} key.",
            successfullyRemovedKey: "Successfully removed {serviceName} key.",
            keyNotSet: "Key Status: Not Set",
            keySet: "Key Status: Set",
            saveButton: "Save API Key(s)",

        },
    },

    // Main page
    main: {
        title: 'AI Conversation',
        aiConversation: 'AI Conversation',
        setupForm: {
            title: 'Set up your conversation',
            agentA: 'Agent A',
            agentB: 'Agent B',
            model: 'Model',
            selectModel: 'Select a model',
            tts: {
                title: 'Text-to-Speech',
                enable: 'Enable Text-to-Speech',
                provider: 'TTS Provider',
                selectProvider: 'Select TTS provider',
                voice: 'Voice',
                selectVoice: 'Select voice',
                model: 'TTS Model',
                selectModel: 'Select TTS model',
            },
            startConversation: 'Start Conversation',
            conversationPrompt: 'Start the conversation.',
        },
        conversation: {
            thinking: 'thinking...',
            stop: 'Stop',
            restart: 'Restart Conversation',
        },
        pricing: {
            estimatedCost: 'Estimated cost',
            perMillionTokens: 'per million tokens',
            input: 'Input',
            output: 'Output',
        },
    },

    // Auth pages
    auth: {
        login: {
            title: 'Sign in to Two AIs',
            emailPlaceholder: 'Email',
            passwordPlaceholder: 'Password',
            signIn: 'Sign In',
            signInWithGoogle: 'Sign in with Google',
            noAccount: "Don't have an account?",
            signUp: 'Sign up',
            forgotPassword: 'Forgot password?',
            orContinueWith: "Or continue with",
            signingIn: "Signing In..."
        },
        signup: {
            title: 'Create an account',
            emailPlaceholder: 'Email',
            passwordPlaceholder: 'Password (at least 6 characters)',
            signUp: 'Sign Up',
            signUpWithGoogle: 'Sign up with Google',
            hasAccount: 'Already have an account?',
            signIn: 'Sign in',
            emailLabel: "Email address",
            confirmPasswordPlaceholder: "Confirm Password",
            signingUp: "Signing Up..."
        },
        errors: {
            invalidCredentials: 'Invalid email or password',
            userNotFound: 'User not found',
            weakPassword: 'Password should be at least 6 characters',
            emailInUse: 'Email already in use',
            generic: 'An error occurred. Please try again.',
            initialization: "Initialization error. Please try again later.",
            invalidEmail: "Please enter a valid email address.",
            tooManyRequests: "Access temporarily disabled due to too many failed login attempts. Please reset your password or try again later.",
            signInFailedPrefix: "Sign in failed: ",
            unknownSignInError: "An unknown error occurred during sign in.",
            profileSaveFailedPrefix: "Signed in, but failed to save profile data: ",
            profileCheckSaveFailedPrefix: "Signed in, but failed to check/save profile data: ",
            accountExistsWithDifferentCredential: "An account already exists with this email using a different sign-in method.",
            googleSignInFailedPrefix: "Google Sign-In failed: ",
            unknownGoogleSignInError: "An unknown error occurred during Google Sign-In.",
            passwordsDoNotMatch: "Passwords do not match.",
            accountCreatedProfileSaveFailedPrefix: "Account created, but failed to save profile data: ",
            unknownProfileSaveError: "An unknown error occurred saving profile.",
            emailAlreadyRegistered: "This email address is already registered.",
            passwordTooShortSignUp: "Password should be at least 6 characters long.",
            signUpFailedPrefix: "Failed to sign up: ",
            unknownSignUpError: "An unknown error occurred during sign up."
        },
    },

    // Common
    common: {
        loading: 'Loading...',
        error: 'Error',
        save: 'Save',
        cancel: 'Cancel',
        delete: 'Delete',
        confirm: 'Confirm',
        or: 'or',
    },

    // In Settings > API Keys > Provider specific sections
    apiKeyMissing: "API Key Missing",
    apiKeyMissingSubtext: "The API key for this provider is missing or invalid. Please add it in settings.",
    apiKeyNotNeeded: "API Key Not Needed",
    apiKeyNotNeededSubtext: "This provider does not require an API key for its free tier or certain models.",
    apiKeyFound: "API Key Set",
    apiKeyFoundSubtext: "An API key is configured for this provider.",

    // Model Categories (src/app/page.tsx)
    modelCategory_FlagshipChat: "Flagship chat models",
    modelCategory_Reasoning: "Reasoning models",
    modelCategory_CostOptimized: "Cost-optimized models",
    modelCategory_OlderGPT: "Older GPT models",
    modelCategory_Gemini2_5: "Gemini 2.5 models",
    modelCategory_Gemini2_0: "Gemini 2.0 models",
    modelCategory_Gemini1_5: "Gemini 1.5 models",
    modelCategory_Claude4: "Claude 4 models",
    modelCategory_Claude3_7: "Claude 3.7 model",
    modelCategory_Claude3_5: "Claude 3.5 models",
    modelCategory_Claude3: "Claude 3 models",
    modelCategory_Grok4: "Grok 4 model",
    modelCategory_Grok3: "Grok 3 models",
    modelCategory_Grok3Mini: "Grok 3 Mini models",
    modelCategory_Llama4: "Llama 4 models",
    modelCategory_Llama3_3: "Llama 3.3 models",
    modelCategory_Llama3_2: "Llama 3.2 models",
    modelCategory_Llama3_1: "Llama 3.1 models",
    modelCategory_Llama3: "Llama 3 models",
    modelCategory_LlamaVision: "Llama Vision models",
    modelCategory_MetaLlama: "Meta Llama Models",
    modelCategory_Gemma3n: "Gemma 3n model",
    modelCategory_Gemma2: "Gemma 2 model",
    modelCategory_Gemma: "Gemma models",
    modelCategory_GoogleGemma: "Google Gemma Models",
    modelCategory_DeepSeekR1: "DeepSeek R1 model",
    modelCategory_DeepSeekV3: "DeepSeek V3 model",
    modelCategory_DeepSeekR1Distill: "DeepSeek R1 Distill models",
    modelCategory_DeepSeekModels: "DeepSeek Models",
    modelCategory_MistralAIModels: "Mistral AI Models",
    modelCategory_Qwen3: "Qwen3 model",
    modelCategory_QwQwQ: "Qwen QwQ model",
    modelCategory_Qwen2_5: "Qwen2.5 models",
    modelCategory_Qwen2_5Vision: "Qwen2.5 Vision model",
    modelCategory_Qwen2_5Coder: "Qwen2.5 Coder model",
    modelCategory_Qwen2: "Qwen2 model",
    modelCategory_Qwen2Vision: "Qwen2 Vision model",
    modelCategory_QwenModels: "Qwen Models",
    modelCategory_OtherModels: "Other Models",

    // Page specific (src/app/page.tsx)
    page_ErrorLoadingUserData: "Failed to load user data: {errorMessage}. Please try refreshing.",
    page_ErrorUserNotFound: "User not found. Please sign in again.",
    page_ErrorUserApiKeyConfig: "User API key configuration could not be loaded. Please refresh or check settings.",
    page_ErrorStartingSessionAPI: "API Error: {status} {statusText}",
    page_ErrorStartingSessionGeneric: "Error starting session: {errorMessage}",
    page_ErrorSessionIdMissing: "API response successful but did not include a conversationId.",
    page_LoadingUserData: "Loading user data...",
    page_ErrorAlertTitle: "Error",
    page_WelcomeTitle: "Welcome to Two AIs",
    page_WelcomeSubtitle: "This website lets you listen to conversations between two Large Language Models (LLMs) and generate images for each turn.",
    page_ApiKeysRequiredTitle: "API Keys Required",
    page_ApiKeysRequiredDescription: "To run conversations, you'll need to provide your own API keys for the AI models you wish to use (e.g., OpenAI, Google, Anthropic) after signing in. Detailed instructions for each provider can be found on the Settings / API Keys page after signing in.",
    page_SignInPrompt: "To start your own session, you can sign in or create an account using the link in the header.",
    page_VideoTitle: "Two AIs Conversation Demo",
    page_AvailableLLMsTitle: "Currently Available LLMs",
    page_TooltipKnowledgeCutoff: "The model's knowledge is cut off at this date.",
    page_TooltipGoogleThinkingBudget: "This Google model uses a 'thinking budget'. The 'thinking' output is billed but is not visible in the chat.",
    page_TooltipAnthropicExtendedThinking: "This Anthropic model uses 'extended thinking'. The 'thinking' output is billed but is not visible in the chat.",
    page_TooltipXaiThinking: "This xAI model uses 'thinking'. This output is billed but is not visible in the chat.",
    page_TooltipQwenReasoning: "This Qwen model uses 'reasoning/thinking'. This output is billed but is not visible in the chat.",
    page_TooltipDeepSeekReasoning: "This DeepSeek model uses 'reasoning/thinking'. Output is billed but is not visible in the chat.",
    page_TooltipGenericReasoning: "This model uses reasoning tokens that are not visible in the chat but are billed as output tokens.",
    page_TooltipRequiresVerification: "Requires verified OpenAI organization. You can verify here.", // Note: 'verify here' will be a link
    page_TooltipSupportsLanguage: "Supports {languageName}",
    page_TooltipMayNotSupportLanguage: "This model may not fully support {languageName} for conversation.",
    page_BadgePreview: "Preview",
    page_BadgeExperimental: "Experimental",
    page_BadgeBeta: "Beta",
    page_AvailableTTSTitle: "Currently Available Text-to-Speech (TTS)",
    page_AvailableImageModelsTitle: "Currently Available Image Models", // Added for image models section
    page_NoTTSOptions: "No TTS options currently available.",
    page_TruncatableNoteFormat: "({noteText})",
    page_PricesLastVerifiedOn: 'Prices last verified on {date}',
    page_PricingPerTokens: 'per {amount} Tokens',
    page_ModelCategoryModels: '{model} models',
    common_verifyHere: "verify here", // Added for link text
    // Text To Speech specific voice names (if needed globally)
    ttsVoice_Ugne: "Ugne", // Lithuanian voice name, added for consistency

    // Session Setup Form
    sessionSetupForm: {
        title: 'Session Setup Form',
        description: 'Here you can select the LLM and optional TTS settings for each agent.',
        agentAModel: 'Agent A Model',
        agentBModel: 'Agent B Model',
        selectLLMForAgentA: 'Select LLM for Agent A',
        selectLLMForAgentB: 'Select LLM for Agent B',
        enableTTS: 'Enable Text-to-Speech (TTS)',
        agentATTS: 'Agent A TTS',
        agentBTTS: 'Agent B TTS',
        provider: 'Provider',
        initialSystemPrompt: 'Initial System Prompt',
        initialPromptDescription: 'This prompt will be sent as the first message to start the conversation. If you leave it blank, there will be no prompt.',
        startConversation: 'Start Conversation',
        starting: 'Starting...',
        startTheConversation: 'Start the conversation.',
        languageSupportNote: 'Language support indicators show model compatibility with {languageName}. Models without support are disabled.',
        reasoningNote: "Indicates a model uses 'thinking' or 'reasoning' tokens. This output is billed but is not visible in the chat.",
        openaiOrgVerificationNote: 'Indicates an OpenAI model requires a verified organization. You can',
        voice: 'Voice',
        selectVoice: 'Select Voice',
        noVoicesFor: 'No voices for {languageName}',
        ttsProviderModel: '{providerName} Model',
        selectTtsProviderModel: 'Select {providerName} Model',
        selectProvider: 'Select Provider',
        per: 'per',
        enableImageGen: 'Enable Image Generation',
        imageModel: 'Image Model',
        quality: 'Quality',
        size: 'Size',
        promptLLM: 'Prompt LLM',
        imagePromptSystemMessage: 'Image Prompt System Message',
        defaultImagePromptSystemMessage: 'Create a prompt to give to the image generation model based on this turn: {turn}',
        imagePromptSystemMessageHelp: "This message will be sent as the system prompt to the LLM that generates the image prompt. Use <code>{'{turn}'}</code> as a placeholder for the agent's message.",
        selectImageModel: 'Select image model',
        selectPromptLLM: 'Select LLM for image prompt',
    },

    history: {
        backToMain: 'Back to Main',
        conversationHistory: 'Conversation History',
        chatWith: 'Chat with {agentA} & {agentB}',
        conversationDescription: 'Started on {date} - Language: {language}',
        viewConversation: 'View Conversation',
        backToPreviousChats: 'Back to Previous Chats',
        resumeConversation: 'Resume Conversation',
        resuming: 'Resuming...',
        sessionDetails: 'Session Details',
        language: 'Language',
        transcript: 'Transcript',
        loadingHistory: 'Loading history...',
        loadingConversation: 'Loading conversation...',
        chatStartedOn: 'Chat started on {date}',
        agentAModel: 'Agent A Model',
        agentBModel: 'Agent B Model',
        ttsSettings: 'TTS Settings',
        agentATTS: 'Agent A TTS',
        agentBTTS: 'Agent B TTS',
        provider: 'Provider',
        model: 'Model',
        voice: 'Voice',
    },

    imageModel_Quality: "Quality",
    imageModel_Size: "Size",
    imageModel_PriceUSD: "Price (USD)",
    // --------------- END OF FILE --------------- 
};
export default en; 